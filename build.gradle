plugins {
    id "org.asciidoctor.jvm.convert" version "3.3.2"
    id "com.github.jruby-gradle.base" version "2.0.2"
    id "org.jetbrains.kotlin.jvm" version "1.6.21"
    id "org.jetbrains.kotlin.kapt" version "1.6.21"
    id "org.jetbrains.kotlin.plugin.allopen" version "1.6.21"
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "org.sonarqube" version "3.3"
    id "application"
    id 'maven-publish'
}

version "0.25.1-SNAPSHOT"
group "technology.iatlas.spaceup"

repositories {
    mavenCentral()
    maven {
        url = uri("https://oss.sonatype.org/content/repositories/snapshots")
    }
}

configurations {
    // for dependencies that are needed for development only
    developmentOnly
}

dependencies {
    kapt(platform("io.micronaut:micronaut-bom:$micronautVersion"))
    kapt("io.micronaut:micronaut-inject-java:3.4.3")
    kapt('io.micronaut:micronaut-validation:3.4.3')
    kapt("io.micronaut:micronaut-graal:$micronautVersion")
    kapt('io.micronaut.openapi:micronaut-openapi:4.0.1')
    kapt('io.micronaut.security:micronaut-security-annotations:3.5.0')
    compileOnly(platform("io.micronaut:micronaut-bom:$micronautVersion"))
    compileOnly('org.graalvm.nativeimage:svm:22.0.0.2')
    implementation(platform("io.micronaut:micronaut-bom:$micronautVersion"))
    implementation('io.micronaut:micronaut-management:3.4.3')
    implementation("io.micronaut:micronaut-inject:$micronautVersion")
    implementation("io.micronaut:micronaut-validation:$micronautVersion")
    implementation('io.micronaut.rxjava3:micronaut-rxjava3:2.2.1')
    implementation("io.reactivex.rxjava3:rxkotlin:3.0.1")
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}")
    implementation("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")
    implementation('io.micronaut.kotlin:micronaut-kotlin-runtime:3.2.2')
    implementation("io.micronaut:micronaut-runtime:$micronautVersion")
    implementation('javax.annotation:javax.annotation-api:1.3.2')
    implementation("io.micronaut:micronaut-http-server-netty:$micronautVersion")
    implementation("io.micronaut:micronaut-http-client:$micronautVersion")
    implementation('io.swagger.core.v3:swagger-annotations:2.2.0')
    implementation('io.micronaut:micronaut-tracing:3.2.7')
    runtimeOnly('io.jaegertracing:jaeger-thrift:1.8.0')
    implementation("io.micronaut.security:micronaut-security:3.2.0")
    implementation('io.micronaut.security:micronaut-security-jwt:3.5.0')
    implementation('io.micronaut.kotlin:micronaut-kotlin-extension-functions:3.2.2')
    implementation('io.micronaut.cache:micronaut-cache-caffeine:3.4.1')
    implementation('com.google.code.gson:gson:2.9.0')
    implementation('org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.1-native-mt')
    implementation('com.github.mwiede:jsch:0.2.1')
    // NoSQL
    implementation('io.micronaut.mongodb:micronaut-mongo-reactive:4.2.0')
    implementation("org.litote.kmongo:kmongo:4.5.1")
    implementation("org.litote.kmongo:kmongo-async:4.5.1")

    implementation("com.fasterxml.jackson.module:jackson-module-kotlin")
    implementation("com.fasterxml.jackson.datatype:jackson-datatype-jdk8")
    implementation("com.fasterxml.jackson.datatype:jackson-datatype-jsr310")
    // Shell commands
    implementation('com.lordcodes.turtle:turtle:0.6.0')
    // Asciidoc Plantuml
    implementation group: 'org.asciidoctor', name: 'asciidoctorj', version: '2.5.2'
    implementation group: 'org.asciidoctor', name: 'asciidoctorj-api', version: '2.5.2'
    implementation group: 'org.asciidoctor', name: 'asciidoctorj-diagram', version: '2.2.1'
    // https://mvnrepository.com/artifact/org.jasypt/jasypt
    implementation('org.jasypt:jasypt:1.9.3')

    runtimeOnly("ch.qos.logback:logback-classic")
    runtimeOnly('com.fasterxml.jackson.module:jackson-module-kotlin:2.13.1')
    runtimeOnly('io.netty:netty-tcnative:2.0.52.Final')
    runtimeOnly('io.netty:netty-tcnative-boringssl-static:2.0.52.Final')
    implementation("org.reflections:reflections:0.10.2")
    kaptTest(enforcedPlatform("io.micronaut:micronaut-bom:$micronautVersion"))
    kaptTest("io.micronaut:micronaut-inject-java:$micronautVersion")
    testImplementation(enforcedPlatform("io.micronaut:micronaut-bom:$micronautVersion"))
    testImplementation('org.junit.jupiter:junit-jupiter-api:5.8.2')
    testImplementation("io.micronaut.test:micronaut-test-junit5:$micronautVersion")
    testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine:5.8.2')
    // Docker Testcontainer
    testImplementation 'org.testcontainers:testcontainers:1.17.1'
}

test.classpath += configurations.developmentOnly

mainClassName = "technology.iatlas.spaceup.ApplicationKt"

// use JUnit 5 platform
test {
    useJUnitPlatform()
}

java {
    sourceCompatibility = JavaVersion.toVersion('11')
}

allOpen {
    annotation("io.micronaut.aop.Around")
}
compileKotlin {
    kotlinOptions {
        jvmTarget = '11'
        //Will retain parameter names for Java reflection
        javaParameters = true
        useIR = true
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = '11'
        javaParameters = true
    }
}
kapt {
    arguments {
        arg("micronaut.processing.incremental", true)
        arg("micronaut.processing.annotations", "technology.iatlas.spaceup.*")
        arg("micronaut.processing.group", "technology.iatlas.spaceup")
        arg("micronaut.processing.module", "spaceUp")
        arg("micronaut.openapi.views.spec",
                "redoc.enabled=true,rapidoc.enabled=true," +
                        "swagger-ui.enabled=true,swagger-ui.theme=flattop")
    }
}

tasks.withType(PublishToMavenRepository) { task ->
    dependsOn("assemble")
}

def generatedVersionDir = "${buildDir}/generated-version"
sourceSets {
    main {
        output.dir(generatedVersionDir, builtBy: 'generatedVersion')
    }
}


tasks.register("generatedVersion") {
    doLast {
        def propertiesFile = file "$generatedVersionDir/version.properties"
        propertiesFile.parentFile.mkdirs()
        def properties = new Properties()
        properties.setProperty("version", rootProject.version.toString())
        propertiesFile.withWriter { properties.store(it, null) }
    }
}

processResources {
    dependsOn tasks.named("generatedVersion")
    //dependsOn tasks.named("asciidoctor")
}

shadowJar {
    //minimize()
    mergeServiceFiles()
}

tasks.withType(JavaExec) {
    classpath += configurations.developmentOnly
    jvmArgs('-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')
    if (gradle.startParameter.continuous) {
        systemProperties(
            'micronaut.io.watch.restart':'true',
            'micronaut.io.watch.enabled':'true',
            "micronaut.io.watch.paths":"src/main"
        )
    }
}

apply from: 'gradle/asciidoc.gradle'

publishing {
    publications {
        maven(MavenPublication) {
            artifact("build/libs/SpaceUp-$version"+"-all.jar") {
                extension 'jar'
            }
        }
    }
    repositories {
        maven {
            name "Maven"
            url "https://artifactory.iatlas.dev/releases/"
            credentials {
                username "${nexusUsername}"
                password "${nexusPassword}"
            }
        }
    }
}
