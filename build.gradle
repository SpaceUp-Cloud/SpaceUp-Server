plugins {
    id "org.asciidoctor.jvm.convert" version "3.1.0"
    id "org.jetbrains.kotlin.jvm" version "1.4.32"
    id "org.jetbrains.kotlin.kapt" version "1.4.32"
    id "org.jetbrains.kotlin.plugin.allopen" version "1.4.32"
    id "com.github.johnrengelman.shadow" version "6.0.0"
    id "application"
    id "com.fizzed.rocker" version "1.3.0"
    id "io.miret.etienne.sass" version "1.1.1"
}

version "0.11-SNAPSHOT"
group "technology.iatlas.spaceup"

repositories {
    mavenCentral()
    jcenter()
}

configurations {
    // for dependencies that are needed for development only
    developmentOnly
}

dependencies {
    kapt(platform("io.micronaut:micronaut-bom:$micronautVersion"))
    kapt("io.micronaut:micronaut-inject-java")
    kapt("io.micronaut:micronaut-validation")
    kapt("io.micronaut:micronaut-graal")
    kapt("io.micronaut.configuration:micronaut-openapi")
    kapt("io.micronaut.security:micronaut-security-annotations")
    compileOnly(platform("io.micronaut:micronaut-bom:$micronautVersion"))
    compileOnly("org.graalvm.nativeimage:svm")
    implementation(platform("io.micronaut:micronaut-bom:$micronautVersion"))
    implementation("io.micronaut:micronaut-inject")
    implementation("io.micronaut:micronaut-validation")
    implementation("io.micronaut.rxjava3:micronaut-rxjava3:1.1.0")
    implementation("io.reactivex.rxjava3:rxkotlin:3.0.1")
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}")
    implementation("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")
    implementation("io.micronaut.kotlin:micronaut-kotlin-runtime")
    implementation("io.micronaut:micronaut-runtime")
    implementation("javax.annotation:javax.annotation-api")
    implementation("io.micronaut:micronaut-http-server-netty")
    implementation("io.micronaut:micronaut-http-client")
    implementation("io.swagger.core.v3:swagger-annotations")
    implementation("io.micronaut:micronaut-tracing")
    runtimeOnly("io.jaegertracing:jaeger-thrift")
    implementation("io.micronaut.mongodb:micronaut-mongo-reactive")
    implementation("io.micronaut.security:micronaut-security")
    implementation("io.micronaut.security:micronaut-security-jwt")
    implementation("io.micronaut.kotlin:micronaut-kotlin-extension-functions")
    implementation("io.micronaut.cache:micronaut-cache-caffeine")
    implementation("io.micronaut.views:micronaut-views-rocker")
    implementation("org.apache.logging.log4j:log4j-core:2.12.1")
    implementation('com.google.code.gson:gson:2.8.6')
    implementation('org.jetbrains.kotlinx:kotlinx-coroutines-core:1.4.2')
    implementation('com.jcraft:jsch:0.1.55')
    runtimeOnly("org.apache.logging.log4j:log4j-api:2.12.1")
    runtimeOnly("org.apache.logging.log4j:log4j-slf4j-impl:2.12.1")
    runtimeOnly("com.fasterxml.jackson.module:jackson-module-kotlin")
    runtimeOnly("io.netty:netty-tcnative:2.0.35.Final")
    runtimeOnly("io.netty:netty-tcnative-boringssl-static:2.0.35.Final")
    runtimeOnly("com.fizzed:rocker-compiler:1.3.0")
    implementation("org.reflections:reflections:0.9.12")
    kaptTest(enforcedPlatform("io.micronaut:micronaut-bom:$micronautVersion"))
    kaptTest("io.micronaut:micronaut-inject-java")
    testImplementation(enforcedPlatform("io.micronaut:micronaut-bom:$micronautVersion"))
    testImplementation("org.junit.jupiter:junit-jupiter-api")
    testImplementation("io.micronaut.test:micronaut-test-junit5")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")
    testImplementation("de.flapdoodle.embed:de.flapdoodle.embed.mongo:2.0.1")
}

test.classpath += configurations.developmentOnly

mainClassName = "technology.iatlas.spaceup.ApplicationKt"

// use JUnit 5 platform
test {
    useJUnitPlatform()
}

java {
    sourceCompatibility = JavaVersion.toVersion('8')
}

allOpen {
    annotation("io.micronaut.aop.Around")
}
compileKotlin {
    kotlinOptions {
        jvmTarget = '1.8'
        //Will retain parameter names for Java reflection
        javaParameters = true
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = '1.8'
        javaParameters = true
    }
}
kapt {
    arguments {
        arg("micronaut.processing.incremental", true)
        arg("micronaut.processing.annotations", "technology.iatlas.spaceup.*")
        arg("micronaut.processing.group", "technology.iatlas.spaceup")
        arg("micronaut.processing.module", "spaceUp")
        arg("micronaut.openapi.views.spec",
                "redoc.enabled=true,rapidoc.enabled=true," +
                        "swagger-ui.enabled=true,swagger-ui.theme=flattop")
    }
}

shadowJar {
    mergeServiceFiles()
}

tasks.withType(JavaExec) {
    classpath += configurations.developmentOnly
    jvmArgs('-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')
    if (gradle.startParameter.continuous) {
        systemProperties(
            'micronaut.io.watch.restart':'true',
            'micronaut.io.watch.enabled':'true',
            "micronaut.io.watch.paths":"src/main"
        )
    }
}

apply from: 'gradle/asciidoc.gradle'


sourceSets {
    main {
        rocker {
            srcDir('src/main/resources')
        }
    }
}
compileSass {
    // Directory where to output generated CSS:
    outputDir = project.file ("${buildDir}/resources/main/static/style")

    // Source directory containing sass to compile:
    sourceDir = project.file ("${projectDir}/src/main/sass")

    // Adds a directory to sass load path (default is empty):
    loadPath project.file ('sass-lib')
    loadPath project.file ('/var/lib/compass')

    // Set the output style:
    // Possible values are “expanded” and “compressed”, default is “expanded”.
    style = expanded

    // Don’t emit a @charset for CSS with non-ASCII chars (default to emit):
    noCharset ()

    // When an error occurs, do not emit a stylesheet describing it:
    // (Default to emit)
    noErrorCss ()

    // Watch sass files in sourceDir for changes
    //watch ()

    // Source map style:
    //  - file: output source map in a separate file (default)
    //  - embed: embed source map in CSS
    //  - none: do not emit source map.
    sourceMap = file

    // How to link source maps to source files [relative (default) or absolute]:
    sourceMapUrls = relative
}

run.dependsOn {
    compileSass
}

shadowJar.dependsOn {
    compileSass
}

apply plugin: 'maven-publish'
publishing {
    publications {
        maven(MavenPublication) {
            artifact("build/libs/SpaceUp-$version"+"-all.jar") {
                extension 'jar'
            }
        }
    }
    repositories {
        maven {
            name "nexus"
            url "https://artifactory.iatlas.dev/repository/technology.iatlas.spaceup/"
            credentials {
                username "${nexusUsername}"
                password "${nexusPassword}"
            }
        }
    }
}